//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace ForkTip.GrainInterfaces
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using Orleans;
    using ForkTip.Models;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class RecipeGrainFactory
    {
        

                        public static IRecipeGrain GetGrain(long primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IRecipeGrain), 531957362, primaryKey));
                        }

                        public static IRecipeGrain GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IRecipeGrain), 531957362, primaryKey, grainClassNamePrefix));
                        }

                        public static IRecipeGrain GetGrain(Guid primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IRecipeGrain), 531957362, primaryKey));
                        }

                        public static IRecipeGrain GetGrain(Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IRecipeGrain), 531957362, primaryKey, grainClassNamePrefix));
                        }

            public static IRecipeGrain Cast(IAddressable grainRef)
            {
                
                return RecipeGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.GrainReferenceAttribute("ForkTip.GrainInterfaces.IRecipeGrain")]
        internal class RecipeGrainReference : Orleans.GrainReference, IRecipeGrain, Orleans.IAddressable
        {
            

            public static IRecipeGrain Cast(IAddressable grainRef)
            {
                
                return (IRecipeGrain) GrainReference.CastInternal(typeof(IRecipeGrain), (GrainReference gr) => { return new RecipeGrainReference(gr);}, grainRef, 531957362);
            }

                protected override int InterfaceId { get { return 531957362; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "ForkTip.GrainInterfaces.IRecipeGrain"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return RecipeGrainMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal RecipeGrainReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                RecipeGrainReference input = ((RecipeGrainReference)(original));
                return ((RecipeGrainReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                RecipeGrainReference input = ((RecipeGrainReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return RecipeGrainReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public System.Threading.Tasks.Task<bool> TryInitialize(ForkTip.Models.Recipe value, string newPassword)
            {

                return base.InvokeMethodAsync<System.Boolean>(-884766533, new object[] {value, newPassword}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task<System.Guid> Fork(string newPassword)
            {

                return base.InvokeMethodAsync<System.Guid>(1370146276, new object[] {newPassword}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task SetName(string password, string value)
            {

                return base.InvokeMethodAsync<object>(2085948699, new object[] {password, value}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task SetDescription(string password, string value)
            {

                return base.InvokeMethodAsync<object>(979169470, new object[] {password, value}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task SetAuthor(string password, string value)
            {

                return base.InvokeMethodAsync<object>(882672596, new object[] {password, value}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task SetIngredients(string password, System.Collections.Generic.List<String> value)
            {

                return base.InvokeMethodAsync<object>(-1644148259, new object[] {password, value}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task SetDirections(string password, System.Collections.Generic.List<String> value)
            {

                return base.InvokeMethodAsync<object>(-614332566, new object[] {password, value}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task<ForkTip.Models.Recipe> Get()
            {

                return base.InvokeMethodAsync<ForkTip.Models.Recipe>(-940922787, new object[] {}, TimeSpan.Zero );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [Orleans.MethodInvokerAttribute("ForkTip.GrainInterfaces.IRecipeGrain", 531957362)]
    internal class RecipeGrainMethodInvoker : IGrainMethodInvoker
    {
        
        public int InterfaceId
        {
            get
            {
                return 531957362;
            }
        }
        
        public async System.Threading.Tasks.Task<Object> Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {
                if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 531957362:  // IRecipeGrain
                        switch (methodId)
                        {
                            case -884766533: 
                                return await ((IRecipeGrain)grain).TryInitialize((ForkTip.Models.Recipe)arguments[0], (String)arguments[1]);
                            case 1370146276: 
                                return await ((IRecipeGrain)grain).Fork((String)arguments[0]);
                            case 2085948699: 
                                await ((IRecipeGrain)grain).SetName((String)arguments[0], (String)arguments[1]);
                              return true;
                            case 979169470: 
                                await ((IRecipeGrain)grain).SetDescription((String)arguments[0], (String)arguments[1]);
                              return true;
                            case 882672596: 
                                await ((IRecipeGrain)grain).SetAuthor((String)arguments[0], (String)arguments[1]);
                              return true;
                            case -1644148259: 
                                await ((IRecipeGrain)grain).SetIngredients((String)arguments[0], (System.Collections.Generic.List<String>)arguments[1]);
                              return true;
                            case -614332566: 
                                await ((IRecipeGrain)grain).SetDirections((String)arguments[0], (System.Collections.Generic.List<String>)arguments[1]);
                              return true;
                            case -940922787: 
                                return await ((IRecipeGrain)grain).Get();
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 531957362:  // IRecipeGrain
                    switch (methodId)
                    {
                        case -884766533:
                            return "TryInitialize";
                    case 1370146276:
                            return "Fork";
                    case 2085948699:
                            return "SetName";
                    case 979169470:
                            return "SetDescription";
                    case 882672596:
                            return "SetAuthor";
                    case -1644148259:
                            return "SetIngredients";
                    case -614332566:
                            return "SetDirections";
                    case -940922787:
                            return "Get";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class RecipeGrainProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ForkTip.GrainInterfacesSerializers
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using Orleans.Serialization;
    using ForkTip.Models;
    using System.Collections;
    using System.Runtime.InteropServices;
    
    
    [Orleans.RegisterSerializerAttribute()]
    internal class ForkTip_Models_RecipeSerialization
    {
        
        static ForkTip_Models_RecipeSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            ForkTip.Models.Recipe input = ((ForkTip.Models.Recipe)(original));
            ForkTip.Models.Recipe result = new ForkTip.Models.Recipe();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.Author = input.Author;
            result.Description = input.Description;
            result.Directions = ((List<String>)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.Directions)));
            result.Id = ((Guid)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.Id)));
            result.Ingredients = ((List<String>)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.Ingredients)));
            result.Name = input.Name;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            ForkTip.Models.Recipe input = ((ForkTip.Models.Recipe)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Author, stream, typeof(String));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Description, stream, typeof(String));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Directions, stream, typeof(List<String>));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Id, stream, typeof(Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Ingredients, stream, typeof(List<String>));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Name, stream, typeof(String));
        }
        
        public static object Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            ForkTip.Models.Recipe result = new ForkTip.Models.Recipe();
            result.Author = ((String)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(String), stream)));
            result.Description = ((String)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(String), stream)));
            result.Directions = ((List<String>)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(List<String>), stream)));
            result.Id = ((Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Guid), stream)));
            result.Ingredients = ((List<String>)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(List<String>), stream)));
            result.Name = ((String)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(String), stream)));
            return result;
        }
        
        public static void Register()
        {
            Orleans.Serialization.SerializationManager.Register(typeof(ForkTip.Models.Recipe), DeepCopier, Serializer, Deserializer);
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
